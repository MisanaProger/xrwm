use std::cell::RefCell;

pub struct KeyboardEventHandler {
    input_buffer: RefCell<Vec<KeyCode>>,
    key_combinations: Vec<Vec<KeyCode>>,
}

impl KeyboardEventHandler {
    pub fn new() -> KeyboardEventHandler {
        KeyboardEventHandler {
            input_buffer: RefCell::new(Vec::new()),
        }
    }

    pub fn on_press(&self, event: xcb::x::KeyPressEvent) {
        self.input_buffer
            .borrow_mut()
            .push(KeyCode::from(event.detail()))
    }
}

pub enum KeyCode {
    A = 38,
    B = 56,
    C = 54,
    D = 40,
    E = 26,
    F = 41,
    G = 42,
    H = 43,
    I = 31,
    J = 44,
    K = 45,
    L = 46,
    M = 58,
    N = 57,
    O = 32,
    P = 33,
    Q = 24,
    R = 27,
    S = 39,
    T = 28,
    U = 30,
    V = 55,
    W = 25,
    X = 53,
    Y = 29,
    Z = 52,

    Esc = 8,
    LeftControl = 37,
    RightControl = 105,
    LeftAlt = 64,
    RightAlt = 108,
    LeftShift = 50,
    RightShift = 62,
    Return = 36,
    BackSpace = 22,
    Space = 65,
    Tab = 23,
    CapsLock = 66,
    LeftSuper = 133,
    RightSuper = 134,
    Menu = 135,
    NumLock = 77,

    End = 115,
    Home = 110,
    PageUp = 112,
    PageDown = 117,
    Pause = 127,
    Delete = 119,
    Insert = 118,
    Print = 107,

    Up = 111,
    Down = 116,
    Left = 113,
    Right = 114,

    F1 = 67,
    F2 = 68,
    F3 = 69,
    F4 = 70,
    F5 = 71,
    F6 = 72,
    F7 = 73,
    F8 = 74,
    F9 = 75,
    F10 = 76,
    F11 = 95,
    F12 = 96,

    Num1 = 10,
    Num2 = 11,
    Num3 = 12,
    Num4 = 13,
    Num5 = 14,
    Num6 = 15,
    Num7 = 16,
    Num8 = 17,
    Num9 = 18,
    Num0 = 19,
    Minus = 20,
    PlusAndEqual = 21,

    NumpadNum1,
    NumpadNum2,
    NumpadNum3,
    NumpadNum4,
    NumpadNum5,
    NumpadNum6,
    NumpadNum7,
    NumpadNum8,
    NumpadNum9,
    NumpadNum0,
    NumpadEnter,
    NumpadPlus,
    NumpadMinus,
    NumpadDevide,
    NumpadMultiply,
    NumpadDelete,
    NumpadDecimal,
    NumpadUp,
    NumpadDown,
    NumpadLeft,
    NumpadRight,
    NumpadEnd,
    NumpadHome,
    NumpadPageUp,
    NumpadPageDown,
    NumpadInsert,

    FunctionalPowerOff,
    FunctionalAudioLowerVolume,
    FunctionalRiseAudioVolume,
    FunctionalMute,
    FunctionalAudioPause,
    FunctionalAudioStop,
    FunctionalAudioMedia,
    FunctionalAudioPlay,
    FunctionalAudioRecord,
    FunctionalAudioNext,
    FunctionalAudioPrev,
    FunctionalAudioFarward,
    FunctionalMicrophoneMutea,

    FunctionlDisplay,
    FunctionalDisplayOff,

    FunctionalMonitorBrightnessDown,
    FunctionalMonitorBrightnessUp,
    FunctionalMonitorBrightnessCycle,

    FunctionalOpen,
    FunctionalClose,
    FunctionalCopy,
    FunctionalCut,
    FunctionalPaste,

    FunctionalSleep,
    FunctionalWakeUp,
    FunctionalCalculator,
    FunctionalSend,
    FunctionalScreenSaver,
    FunctionalMail,
    FunctionalFavorites,
    FunctionalTaskPlane,
    FunctionalLaunch1,
    FunctionalLaunch2,
    FunctionalMyComputer,
    FunctionalEject,
    FunctionalBack,
    FunctionalFarward,
    FunctionalRotateWindows,
    FunctionalExplorer,
    FunctionalHomePage,
    FunctionalReload,
    FunctionalTools,
    FunctionalPhone,
    FunctionalScrollUp,
    FunctionalScrollDown,
    FunctionalNew,
    FunctionalSearch,
    FunctionalReply,
}
